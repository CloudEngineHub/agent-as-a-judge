{
    "name": "55_SQLite_Database_Viewer_and_Analyzer_App",
    "query": "I want to create an app that enables users to view and analyze AI development data stored in an SQLite database. On the frontend (implemented in `src/frontend.py`), the user should either upload a new SQLite database, including AI model training logs or prompt-response data, by selecting a file from their device or select a previously uploaded database cached in `src/cache.py`. This way, the user won't need to upload the database every time they want to analyze it. If a new database is uploaded, they can name it, and the file will be sent to the backend (`src/backend.py`) and stored for future use. Once the database is uploaded, users can interact with it. The user should see a list of AI models or apps from an `app` table. They should be able to select one app, and view its development tasks from a `development_planning` table. After selecting a task, they can view all development steps associated with it. Finally, selecting a step will display detailed data such as `prompt_path`, `messages`, `llm_response`, and `prompt_data`, with the appropriate information rendered on the frontend (in `src/frontend_render.py`).\nThe SQLite database will always follow this structure: the `app` table contains all apps stored in the database. Each app has multiple development tasks stored as an array in the `development_planning` table under the key `development_plan`. Each array item is a JSON object with three key-value pairs: `description`, `user_review_goal`, and `programming_goal`. Each development task contains many development steps, which are stored in the `development_steps` table and linked to the `app` table using the `app_id` field.\nThe challenge is that there is no direct connection between the development task and the development step. Therefore, in `src/backend_logic.py`, all development steps need to be retrieved and then split by the `prompt_path` field. Every development task begins with the `prompt_path` value `development/task/breakdown.prompt`, so the development steps can be grouped by splitting the list of steps into smaller lists, where each begins with the step that has `prompt_path` equal to `development/task/breakdown.prompt`. This will give the correct set of development steps for each task.\nEach development step contains the following values, which need to be displayed on the frontend (`src/frontend_render.py`):\n- `prompt_path`: a string.\n- `messages`: an array of JSON objects.\n- `llm_response`: a JSON object.\n- `prompt_data`: a JSON object.\nThe `messages` array will always have JSON objects with the keys `content` and `role`. The frontend should display the `content` in a large text field, with the `role` shown as a label. The `llm_response` object will always have a `text` key, which should be displayed as a text area to show potentially long strings. The `prompt_data` object may have various key-value pairs, and each should be displayed to the user in an appropriate format.",
    "tags": [
        "Other"
    ],
    "requirements": [
        {
            "requirement_id": 0,
            "prerequisites": [],
            "criteria": "The frontend is implemented in `src/frontend.py` and allows users to upload a new SQLite database or select a previously cached one from `src/cache.py`. The chosen file should be saved and accessible for future use.",
            "category": "Human Computer Interaction",
            "satisfied": null
        },
        {
            "requirement_id": 1,
            "prerequisites": [
                0
            ],
            "criteria": "When a new database is uploaded, users can assign it a name, and the file is sent to the backend (`src/backend.py`) and stored for future use.",
            "category": "Other",
            "satisfied": null
        },
        {
            "requirement_id": 2,
            "prerequisites": [
                0,
                1
            ],
            "criteria": "Previously uploaded databases are cached in `src/cache.py` and can be selected without re-uploading.",
            "category": "Dataset or Environment",
            "satisfied": null
        },
        {
            "requirement_id": 3,
            "prerequisites": [
                0,
                1,
                2
            ],
            "criteria": "Once a database is uploaded or selected, the user can view a list of AI models or apps from the `app` table within the database.",
            "category": "Other",
            "satisfied": null
        },
        {
            "requirement_id": 4,
            "prerequisites": [
                0,
                1,
                2,
                3
            ],
            "criteria": "Users can select an app and view its development tasks from the `development_planning` table.",
            "category": "Other",
            "satisfied": null
        },
        {
            "requirement_id": 5,
            "prerequisites": [
                0,
                1,
                2,
                3,
                4
            ],
            "criteria": "After selecting a task, users can view all associated development steps, which are displayed on the frontend implemented in `src/frontend_render.py`.",
            "category": "Human Computer Interaction",
            "satisfied": null
        },
        {
            "requirement_id": 6,
            "prerequisites": [
                0,
                1,
                2,
                3,
                4,
                5
            ],
            "criteria": "Selecting a development step displays detailed data including `prompt_path`, `messages`, `llm_response`, and `prompt_data`, rendered appropriately on the frontend (`src/frontend_render.py`).",
            "category": "Human Computer Interaction",
            "satisfied": null
        },
        {
            "requirement_id": 7,
            "prerequisites": [],
            "criteria": "In `src/backend_logic.py`, retrieve all development steps from the `development_steps` table and group them by development task using the `prompt_path` field starting with `development/task/breakdown.prompt`.",
            "category": "Other",
            "satisfied": null
        },
        {
            "requirement_id": 8,
            "prerequisites": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "criteria": "The `messages` array is displayed on the frontend (`src/frontend_render.py`), showing `content` in a large text field and `role` as a label for each message.",
            "category": "Human Computer Interaction",
            "satisfied": null
        },
        {
            "requirement_id": 9,
            "prerequisites": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "criteria": "The `llm_response` object with the `text` key is displayed in a text area to accommodate potentially long strings on the frontend (`src/frontend_render.py`).",
            "category": "Human Computer Interaction",
            "satisfied": null
        },
        {
            "requirement_id": 10,
            "prerequisites": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "criteria": "The `prompt_data` object is displayed with its key-value pairs presented in an appropriate format on the frontend (`src/frontend_render.py`).",
            "category": "Human Computer Interaction",
            "satisfied": null
        },
        {
            "requirement_id": 11,
            "prerequisites": [],
            "criteria": "The SQLite database follows the specified structure with `app`, `development_planning`, and `development_steps` tables, as described in the project query.",
            "category": "Dataset or Environment",
            "satisfied": null
        },
        {
            "requirement_id": 12,
            "prerequisites": [
                11
            ],
            "criteria": "Each app in the `app` table has multiple development tasks stored as an array under the key `development_plan` in the `development_planning` table.",
            "category": "Dataset or Environment",
            "satisfied": null
        },
        {
            "requirement_id": 13,
            "prerequisites": [
                11
            ],
            "criteria": "Each development task contains many development steps stored in the `development_steps` table and linked to the `app` table using the `app_id` field.",
            "category": "Dataset or Environment",
            "satisfied": null
        }
    ],
    "preferences": [
        {
            "preference_id": 0,
            "criteria": "The frontend interface should allow easy interaction with the database, ensuring users can smoothly navigate between apps, tasks, and steps.",
            "satisfied": null
        },
        {
            "preference_id": 1,
            "criteria": "The system should efficiently handle large SQLite databases, ensuring that performance is maintained with large datasets.",
            "satisfied": null
        },
        {
            "preference_id": 2,
            "criteria": "Information should be rendered on the frontend in an intuitive and user-friendly manner, ensuring ease of interaction.",
            "satisfied": null
        },
        {
            "preference_id": 3,
            "criteria": "The grouping of development steps should accurately reflect the correct set of steps for each task, as per the logic implemented in `src/backend_logic.py`.",
            "satisfied": null
        }
    ],
    "is_kaggle_api_needed": false,
    "is_training_needed": false,
    "is_web_navigation_needed": false,
    "resource": "https://github.com/Pythagora-io/gpt-pilot/wiki/How-to-write-a-good-initial-project-description"
}