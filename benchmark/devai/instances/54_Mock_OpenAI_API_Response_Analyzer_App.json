{
    "name": "54_Mock_OpenAI_API_Response_Analyzer_App",
    "query": "I want to create an app that will enable me to analyze the different responses the OpenAI API may give for the same query. The frontend should be implemented in `src/frontend.py` and should contain a conversation between a user and an LLM as a list. Each list item should contain a text field where I can add a (potentially large) text message and a dropdown that selects if the message is from the LLM or the user. This functionality should be handled in `src/message_list.py`. There can be an unbounded number of these list items, so when the app loads, it should start with a single empty list item, and there should be a button to add new list items as needed. Other than the list, there should be a numeric field, implemented in `src/frontend.py`, that the user can edit. This field should only allow values from 0 to 100. There should also be a button labelled SUBMIT. When I click on the SUBMIT button, the full conversation should be sent to the OpenAI API in parallel X number of times, where X is the value of the 0 to 100 number that the user entered on the frontend. All API requests and responses should be handled in `src/backend.py`. When the responses are fetched from the OpenAI API, they should be displayed as a list of expandable elements in `src/frontend_render.py`. For example, if I set the number of requests to 10, when the responses start coming, 10 elements should appear, each labelled with the request number. When expanded, they should show that specific response. Keep in mind that the OpenAI API returns a stream, so the responses should stream to the frontend token-by-token and be displayed in real time. This functionality should be implemented in `src/stream_handler.py`. Use Tailwind for styling in `src/styles.css`, but don't install it. Instead, use the CDN version. You should use mock LLM's responses to alleviate OpenAI key usage. Mock LLM responses should be generated in `src/mock_llm.py`.",
    "tags": [
        "Natural Language Processing",
        "Generative Models",
        "Other"
    ],
    "requirements": [
        {
            "requirement_id": 0,
            "prerequisites": [],
            "criteria": "The frontend should be implemented in `src/frontend.py`, containing a list where the user can add large text messages and select whether the message is from the LLM or the user. When the app loads, the list should start with a single empty item.",
            "category": "Human Computer Interaction",
            "satisfied": null
        },
        {
            "requirement_id": 1,
            "prerequisites": [
                0
            ],
            "criteria": "The message list should allow an unbounded number of items, managed through a button to add new items, implemented in `src/message_list.py`.",
            "category": "Human Computer Interaction",
            "satisfied": null
        },
        {
            "requirement_id": 2,
            "prerequisites": [
                0
            ],
            "criteria": "The interface should allow a user to input a numerical value from 0 to 100, controlling how many parallel API requests will be sent. This function must be implemented in `src/frontend.py`.",
            "category": "Human Computer Interaction",
            "satisfied": null
        },
        {
            "requirement_id": 3,
            "prerequisites": [
                0,
                2
            ],
            "criteria": "The SUBMIT button should trigger the sending of the conversation X times (where X is the value from the numeric input field) to the mock LLM responses. This should be handled by calling the mock response generator in `src/mock_llm.py` from within `src/backend.py`.",
            "category": "Other",
            "satisfied": null
        },
        {
            "requirement_id": 4,
            "prerequisites": [
                0,
                2,
                3
            ],
            "criteria": "Mock responses should be generated by `src/mock_llm.py`, and then passed to `src/frontend_render.py` for display as a list of expandable elements, each labeled by the request number.",
            "category": "Human Computer Interaction",
            "satisfied": null
        },
        {
            "requirement_id": 5,
            "prerequisites": [
                0,
                2,
                3,
                4
            ],
            "criteria": "Responses should be streamed to the frontend and displayed token-by-token in real-time, implemented in `src/stream_handler.py`.",
            "category": "Other",
            "satisfied": null
        },
        {
            "requirement_id": 6,
            "prerequisites": [],
            "criteria": "Tailwind should be used for styling the frontend in `src/styles.css`, loaded via CDN without an installation.",
            "category": "Human Computer Interaction",
            "satisfied": null
        }
    ],
    "preferences": [
        {
            "preference_id": 0,
            "criteria": "The UI should maintain a clean and consistent style, using Tailwind for cohesive and easy-to-navigate design.",
            "satisfied": null
        },
        {
            "preference_id": 1,
            "criteria": "Streaming responses from the API should be efficient, ensuring smooth real-time updates without delays.",
            "satisfied": null
        },
        {
            "preference_id": 2,
            "criteria": "The API request and response handling should be modular, allowing easy modifications, such as adjusting the number of parallel requests.",
            "satisfied": null
        }
    ],
    "is_kaggle_api_needed": false,
    "is_training_needed": false,
    "is_web_navigation_needed": false,
    "resource": "https://github.com/Pythagora-io/gpt-pilot/wiki/How-to-write-a-good-initial-project-description"
}